[{"authors":["ruben"],"categories":null,"content":"Ruben Martins is an Assistant Research Professor at Carnegie Mellon University. His interests lie in the intersection of constraint programming with program synthesis, analysis, and verification. His recent research focuses on using programming synthesis to improve programmer\u0026rsquo;s productivity and to automate data science-related tasks. Ruben received his Ph.D. with honors from the Technical University of Lisbon, Portugal (2013). He was a postdoctoral researcher at the University of Oxford, UK (2014-2015), and a postdoctoral researcher at UT Austin (2015-2017). He has published in top-tier venues, including, POPL, PLDI, FSE, SAT, CP, and has won a distinguished paper award at PLDI 2018 for his work on program synthesis. He has also developed several award-winning constraint solvers and is the main developer of Open-WBO: an open-source Maximum Satisfiability (MaxSAT) solver that won several gold medals in MaxSAT competitions. Open-WBO is used to solve many real-world discrete optimizations problems including finding an optimal seating arrangement for his own wedding.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://sat-group.github.io/ruben/author/ruben-martins/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ruben/author/ruben-martins/","section":"authors","summary":"Ruben Martins is an Assistant Research Professor at Carnegie Mellon University. His interests lie in the intersection of constraint programming with program synthesis, analysis, and verification. His recent research focuses on using programming synthesis to improve programmer\u0026rsquo;s productivity and to automate data science-related tasks.","tags":null,"title":"Ruben Martins","type":"authors"},{"authors":["Yoshiki Takashima","Ruben Martins","Limin Jia","Corina S Pasareanu."],"categories":[],"content":"","date":1624742215,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627334215,"objectID":"f6d506eddc9cc7d024f3b29c0d0877bd","permalink":"https://sat-group.github.io/ruben/publication/pldi21/","publishdate":"2021-06-26T17:16:55-04:00","relpermalink":"/ruben/publication/pldi21/","section":"publication","summary":"","tags":[],"title":"SyRust: Automatic Testing of Rust Libraries with Semantic-Aware Program Synthesis","type":"publication"},{"authors":["Travis Hance","Marijn Heule","Ruben Martins","Bryan Parno"],"categories":[],"content":"","date":1616793415,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627334215,"objectID":"5753e7339a5c3dead569bc8d396eae0c","permalink":"https://sat-group.github.io/ruben/publication/ndss21/","publishdate":"2021-03-26T17:16:55-04:00","relpermalink":"/ruben/publication/ndss21/","section":"publication","summary":"","tags":[],"title":"Finding Invariants of Distributed Systems:It’s a Small (Enough) World After All","type":"publication"},{"authors":["Ansong Ni","Daniel Ramos","Aidan Yang","Inês Lynce","Vasco Manquinho","Ruben Martins","Claire Le Goues"],"categories":[],"content":"","date":1616793415,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627334215,"objectID":"10897e3317752927bd5a4258f5521e98","permalink":"https://sat-group.github.io/ruben/publication/icse21/","publishdate":"2021-03-26T17:16:55-04:00","relpermalink":"/ruben/publication/icse21/","section":"publication","summary":"With the growth of the open-source data science community, both the number of data science libraries and the number of versions for the same library are increasing rapidly. To match the evolving APIs from those libraries, open-source organizations often have to exert manual effort to refactor the APIs used in the code base. Moreover, due to the abundance of similar open-source libraries, data scientists working on a certain application may have an abundance of libraries to choose, maintain and migrate between. The manual refactoring between APIs is a tedious and error-prone task. Although recent research efforts were made on performing automatic API refactoring between different languages, previous work relies on statistical learning with collected pairwise training data for the API matching and migration. Using large statistical data for refactoring is not ideal because such training data will not be available for a new library or a new version of the same library. We introduce Synthesis for Open-Source API Refactoring (SOAR), a novel technique that requires no training data to achieve API migration and refactoring. SOAR relies only on the documentation that is readily available at the release of the library to learn API  representations and mapping between libraries. Using program synthesis, SOAR automatically computes the correct configuration of arguments to the APIs and any glue code required to invoke those APIs. SOAR also uses the interpreter's error messages when running refactored code to generate logical constraints that can be used to prune the search space. Our empirical evaluation shows that SOAR can successfully refactor 80% of our benchmarks corresponding to deep learning models with up to 44 layers with an average run time of 97.23 seconds, and 9% of the data wrangling benchmarks with an average run time of 17.31 seconds.","tags":[],"title":"SOAR: A Synthesis Approachfor Data Science API Refactoring","type":"publication"},{"authors":["Margarida Ferreira","Miguel Terra-Neves","Miguel Ventura","Inês Lynce","Ruben Martins"],"categories":[],"content":"","date":1614374215,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627334215,"objectID":"001d4f07406dadf84b306c846764690e","permalink":"https://sat-group.github.io/ruben/publication/tacas21/","publishdate":"2021-02-26T17:16:55-04:00","relpermalink":"/ruben/publication/tacas21/","section":"publication","summary":"","tags":[],"title":"“FOREST: An Interactive Multi-tree Synthesizer for Regular Expressions","type":"publication"},{"authors":["Ruben Martins","Michael McCall","Dionisio de Niz","Amit Vasudevan","Bjorn Andersson","Mark Klein","John P. Lehoczky and Hyoseung Kim"],"categories":[],"content":"","date":1611695815,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627334215,"objectID":"abcf14818a8599718fd7bf7e2b8535f2","permalink":"https://sat-group.github.io/ruben/publication/rtns21/","publishdate":"2021-01-26T17:16:55-04:00","relpermalink":"/ruben/publication/rtns21/","section":"publication","summary":"","tags":[],"title":"Formal Verification of a Mixed-Trust Synchronization Protocol","type":"publication"},{"authors":["Joshua Clune","Vijay Ramamurthy","Ruben Martins","Umut Acar"],"categories":[],"content":"","date":1602790778,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602790778,"objectID":"8d64826a8041d4b94114bb10e3962cf4","permalink":"https://sat-group.github.io/ruben/publication/oopsla20/","publishdate":"2020-09-21T15:39:38-04:00","relpermalink":"/ruben/publication/oopsla20/","section":"publication","summary":"In courses that involve programming assignments, giving meaningful feedback to students is an important challenge. Human beings can give useful feedback by manually grading the programs but this is a timeconsuming, labor intensive, and usually boring process. Automatic graders can be fast and scale well but they usually provide poor feedback. Although there has been research on improving automatic graders, research on scaling and improving human grading is limited. We propose to scale human grading by augmenting the manual grading process with an equivalence algorithm that can identify the equivalences between student submissions. This enables human graders to give targeted feedback for multiple student submissions at once. Our technique is conservative in two aspects. First, it identifies equivalence between submissions that are algorithmically similar, e.g., it cannot identify the equivalence between quicksort and mergesort. Second, it uses formal methods instead of clustering algorithms from the machine learning literature. This allows us to prove a soundness result that guarantees that submissions will never be clustered together in error. Despite only reporting equivalence when there is algorithmic similarity and the ability to formally prove equivalence, we show that our technique can significantly reduce grading time for thousands of programming submissions from an introductory functional programming course.","tags":[],"title":"Program Equivalence for Assisted Grading of Functional Programs, OOPSLA 2020","type":"publication"},{"authors":["Daniel Ramos","Jorge Pereira","Ines Lynce","Vasco Manquinho","Ruben Martins"],"categories":[],"content":"","date":1600803608,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600803608,"objectID":"37bbbea88494f215c9e006706c07c1f1","permalink":"https://sat-group.github.io/ruben/publication/ase20/","publishdate":"2020-09-21T15:40:08-04:00","relpermalink":"/ruben/publication/ase20/","section":"publication","summary":"Charts are commonly used for data visualization. Generating a chart usually involves performing data transformations, including data pre-processing and aggregation. These tasks can be cumbersome and time-consuming, even for experienced data scientists. Reproducing existing charts can also be a challenging task when information about data transformations is no longer available. In this paper, we tackle the problem of recovering data transformations from existing charts. Given an input table and a chart, our goal is to automatically recover the data transformation program underlying the chart. We divide our approach into four steps: (1) data extraction, (2) candidate generation, (3) candidate ranking, and (4) candidate disambiguation. We implemented our approach in a tool called UnchartIt and evaluated it on a set of 50 benchmarks from Kaggle. Experimental results show that UnchartIt successfully ranks the correct data transformation among the top-10 programs in 92% of the benchmarks. To disambiguate the top-ranking programs, we use our new interactive procedure, which successfully disambiguates 98% of the ambiguous benchmarks by asking on average fewer than 2 questions to the user.","tags":[],"title":"UnchartIt: An Interactive Framework for Program Recovery from Charts, ASE 2020","type":"publication"},{"authors":["Peter Oostema","Ruben Martins","Marijn Heule"],"categories":[],"content":"","date":1600717172,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600717172,"objectID":"42f0ee95c5476e6e3bfc08bc2ad30938","permalink":"https://sat-group.github.io/ruben/publication/lpar20/","publishdate":"2020-09-21T15:39:32-04:00","relpermalink":"/ruben/publication/lpar20/","section":"publication","summary":"Satisfiability (SAT) solving has become an important technology in computer-aided mathematics with various successes in number and graph theory. In this paper we apply SAT solvers to color infinitely long strips in the plane with a given height and number of colors. The coloring is constrained as follows: two points that are exactly unit distance apart must be colored differently. To finitize the problem, we tile the strips and all points on a tile have the same color. We evaluated our approach using two different tile shapes: squares and hexagons. The visualization of bounded height strips using 3 to 6 colors reveal patterns that are similar to the best known lower bounds for infinite strips. Our method can be a useful tool for mathematicians to search for patterns that can be generalized to infinite strips and allowed us to increase the lower bound for the strip height with 5 colors to an improved height of 1.700084.","tags":[],"title":"Coloring Unit-Distance Strips using SAT, LPAR 2020","type":"publication"},{"authors":["Pedro Orvalho","Miguel Terra-Neves","Miguel Ventura","Ruben Martins","Vasco Manquinho"],"categories":[],"content":"","date":1598989198,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598989198,"objectID":"137646bb9595c587e1a95a510a1dd1fe","permalink":"https://sat-group.github.io/ruben/publication/vldb20/","publishdate":"2020-09-21T15:39:58-04:00","relpermalink":"/ruben/publication/vldb20/","section":"publication","summary":"Nowadays, many data analysts are domain experts, but they lack programming skills. As a result, many of them can provide examples of data transformations but are unable to produce the desired query. Hence, there is an increasing need for systems capable of solving the problem of Query Reverse Engineering (QRE). Given a database and output table, these systems have to find the query that generated this table. We present SQUARES, a program synthesis tool based on input-output examples that can help data analysts to extract and transform data by synthesizing SQL queries, and table manipulation programs using the R language.","tags":[],"title":"SQUARES : A SQL Synthesizer Using Query Reverse Engineering, VLDB 2020","type":"publication"},{"authors":["Pedro Orvalho","Miguel Terra-Neves","Miguel Ventura","Ruben Martins","Vasco Manquinho"],"categories":[],"content":"","date":1571844799,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571844799,"objectID":"bcd3bf343552abb3392cc6fc518bc188","permalink":"https://sat-group.github.io/ruben/publication/cp19/","publishdate":"2020-09-23T11:33:19-04:00","relpermalink":"/ruben/publication/cp19/","section":"publication","summary":"Program synthesis is the problem of finding a program that satisfies a given specification. Most program synthesizers are based on enumerating program candidates that satisfy the specification. Recently, several new tools for program synthesis have been proposed where Satisfiability Modulo Theories (SMT) solvers are used to prune the search space by discarding programs that do not satisfy the specification. The size of current tree-based SMT encodings for program synthesis grows exponentially with the size of the program. In this paper, a new compact line-based encoding is proposed that allows a faster enumeration of the program space. Experimental results on a large set of query synthesis problem instances show that using the new encoding results in a more effective tool that is able to synthesize larger programs.","tags":[],"title":"Encodings for Enumeration-Based Program Synthesis, CP 2019","type":"publication"},{"authors":["Yanju Chen","Ruben Martins","Yu Feng"],"categories":[],"content":"","date":1566416360,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566416360,"objectID":"5c43ae0cb46a32362b0408c82c0d2832","permalink":"https://sat-group.github.io/ruben/publication/fse19/","publishdate":"2020-09-21T15:39:20-04:00","relpermalink":"/ruben/publication/fse19/","section":"publication","summary":"There has been a significant interest in applying programming-by-example to automate repetitive and tedious tasks. However, due to the incomplete nature of input-output examples, a synthesizer may generate programs that pass the examples but do not match the user intent. In this paper, we propose Mars, a novel synthesis framework that takes as input a multi-layer specification composed by input-output examples, textual description, and partial code snippets that capture the user intent. To accurately capture the user intent from the noisy and ambiguous description, we propose a hybrid model that combines the power of an LSTM-based sequence-to-sequence model with the apriori algorithm for mining association rules through unsupervised learning. We reduce the problem of solving a multi-layer specification synthesis to a Max-SMT problem, where hard constraints encode well-typed concrete programs and soft constraints encode the user intent learned by the hybrid model. We instantiate our hybrid model to the data wrangling domain and compare its performance against Morpheus, a state-of-the-art synthesizer for data wrangling tasks. Our experiments demonstrate that our approach outperforms Morpheus in terms of running time and solved benchmarks. For challenging benchmarks, our approach can suggest candidates with rankings that are an order of magnitude better than Morpheus which leads to running times that are 15x faster than Morpheus.","tags":[],"title":"Maximal Multi-layer Specification Synthesis, FSE 2019","type":"publication"},{"authors":["Ruben Martins","Jia Chen","Yanju Chen","Yu Feng","Isil Dillig"],"categories":[],"content":"","date":1558467569,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558467569,"objectID":"660284c78d7361beda5d2aa9d34cf736","permalink":"https://sat-group.github.io/ruben/publication/vldb19/","publishdate":"2020-09-21T15:39:29-04:00","relpermalink":"/ruben/publication/vldb19/","section":"publication","summary":"In this demo paper, we introduce Trinity, a general-purpose framework that can be used to quickly build domain-specific program synthesizers for automating many tedious tasks that arise in data science. We illustrate how Trinity can be used by three different users: First, we show how end-users can use Trinity's built-in synthesizers to automate data wrangling tasks. Second, we show how advanced users can easily extend existing synthesizers to support additional functionalities. Third, we show how synthesis experts can change the underlying search engine in Trinity. Overall, this paper is intended to demonstrate how users can quickly use, modify, and extend the Trinity framework with the goal of automating many tasks that are considered to be the janitor work of data science","tags":[],"title":"Trinity: An Extensible Synthesis Framework for Data Science, VLDB 2019","type":"publication"},{"authors":["Yu Feng","Ruben Martins","Osbert Bastani","Isil Dillig"],"categories":[],"content":"","date":1537558725,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537558725,"objectID":"412626cf90e32bf0351732e7acc06db0","permalink":"https://sat-group.github.io/ruben/publication/pldi18/","publishdate":"2020-09-21T15:38:45-04:00","relpermalink":"/ruben/publication/pldi18/","section":"publication","summary":"","tags":[],"title":"Program Synthesis using Conflict-Driven Learning, PLDI 2018","type":"publication"},{"authors":["Yu Feng","Osbert Bastani","Ruben Martins","Isil Dillig","Saswat Anand"],"categories":[],"content":"","date":1511293116,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511293116,"objectID":"6c433857ea6e32eb723b70c5c729b2d6","permalink":"https://sat-group.github.io/ruben/publication/ndss17/","publishdate":"2020-09-21T15:38:36-04:00","relpermalink":"/ruben/publication/ndss17/","section":"publication","summary":"","tags":[],"title":"Automated Synthesis of Semantic Malware Signatures using Maximum Satisfiability, NDSS 2017","type":"publication"},{"authors":["Yu Feng","Ruben Martins","Jacob Van Geffen","Isil Dillig","Swarat Chaudhuri"],"categories":[],"content":"","date":1508614722,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508614722,"objectID":"cef87cf3dea70eef15da23d3d3f04338","permalink":"https://sat-group.github.io/ruben/publication/pldi17/","publishdate":"2020-09-21T15:38:42-04:00","relpermalink":"/ruben/publication/pldi17/","section":"publication","summary":"","tags":[],"title":"Component-Based Synthesis of Table Consolidation and Transformation Tasks from Examples, PLDI 2017","type":"publication"},{"authors":["Yu Feng","Ruben Martins","Yuepeng Wang","Isil Dillig","Thomas W. Reps"],"categories":[],"content":"","date":1506022730,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506022730,"objectID":"a50db4cdd3720bbb1f93f98dad95e5cc","permalink":"https://sat-group.github.io/ruben/publication/popl17/","publishdate":"2020-09-21T15:38:50-04:00","relpermalink":"/ruben/publication/popl17/","section":"publication","summary":"","tags":[],"title":"Component-Based Synthesis for Complex APIs, POPL 2017","type":"publication"},{"authors":["Martin Brain","Liana Hadarean","Daniel Kroening","Ruben Martins"],"categories":[],"content":"","date":1474486742,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1474486742,"objectID":"03c939e4723160f1cba7357f6cb99c88","permalink":"https://sat-group.github.io/ruben/publication/vmcai16/","publishdate":"2020-09-21T15:39:02-04:00","relpermalink":"/ruben/publication/vmcai16/","section":"publication","summary":"","tags":[],"title":"Automatic Generation of Propagation Complete SAT Encodings, VMCAI 2016","type":"publication"},{"authors":["Yuepeng Wang","Yu Feng","Ruben Martins","Arati Kaushik","Isil Dillig","Steven P. Reiss"],"categories":[],"content":"","date":1474486712,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1474486712,"objectID":"d7c81a47c50a7735571fae68b674e892","permalink":"https://sat-group.github.io/ruben/publication/fse16/","publishdate":"2020-09-21T15:38:32-04:00","relpermalink":"/ruben/publication/fse16/","section":"publication","summary":"","tags":[],"title":"Hunter: Next-Generation Code Reuse for Java, FSE 2016","type":"publication"},{"authors":["Miguel Neves","Ruben Martins","Mikolas Janota","Vasco Manquinho","Ines Lynce"],"categories":[],"content":"","date":1442864338,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1442864338,"objectID":"1ad8a8b50ecf77e942128b6567d80729","permalink":"https://sat-group.github.io/ruben/publication/sat15/","publishdate":"2020-09-21T15:38:58-04:00","relpermalink":"/ruben/publication/sat15/","section":"publication","summary":"","tags":[],"title":"Exploiting Resolution-based Representations for MaxSAT Solving, SAT 2015","type":"publication"},{"authors":["Ruben Martins","Vasco Manquinho","Ines Lynce"],"categories":[],"content":"","date":1411328335,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1411328335,"objectID":"e9b973fd69cf7262bb4115a43abb116c","permalink":"https://sat-group.github.io/ruben/publication/sat14/","publishdate":"2020-09-21T15:38:55-04:00","relpermalink":"/ruben/publication/sat14/","section":"publication","summary":"","tags":[],"title":"Open-WBO: a Modular MaxSAT Solver, SAT 2014","type":"publication"},{"authors":["Ruben Martins","Saurabh Joshi","Vasco Manquinho","Ines Lynce"],"categories":[],"content":"","date":1411328306,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1411328306,"objectID":"e16556907608485d5d98d09f073bc36e","permalink":"https://sat-group.github.io/ruben/publication/cp14/","publishdate":"2020-09-21T15:38:26-04:00","relpermalink":"/ruben/publication/cp14/","section":"publication","summary":"Maximum Satisfiability (MaxSAT) is an optimization variant of the Boolean Satisfiability (SAT) problem. In general, MaxSAT algorithms perform a succession of SAT solver calls to reach an optimum solution making extensive use of cardinality constraints. Many of these algorithms are non-incremental in nature, i.e. at each iteration the formula is rebuilt and no knowledge is reused from one iteration to another. In this paper, we exploit the knowledge acquired across iterations using novel schemes to use cardinality constraints in an incremental fashion. We integrate these schemes with several MaxSAT algorithms. Our experimental results show a significant performance boost for these algorithms as compared to their non-incremental counterparts. These results suggest that incremental cardinality constraints could be beneficial for other constraint solving domains.","tags":[],"title":"Incremental Cardinality Constraints for MaxSAT, CP 2014","type":"publication"},{"authors":["Ruben Martins","Vasco Manquinho","Ines Lynce"],"categories":[],"content":"","date":1379792333,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1379792333,"objectID":"9a78a5f573d8ecf93a537c644216d280","permalink":"https://sat-group.github.io/ruben/publication/sat13/","publishdate":"2020-09-21T15:38:53-04:00","relpermalink":"/ruben/publication/sat13/","section":"publication","summary":"","tags":[],"title":"Community-based Partitioning for MaxSAT Solving, SAT 2013","type":"publication"},{"authors":["Ruben Martins","Vasco Manquinho","Ines Lynce"],"categories":[],"content":"","date":1341170757,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1341170757,"objectID":"7b8a2c9dc1cc7478a5ad054195ad2ab1","permalink":"https://sat-group.github.io/ruben/publication/ai12/","publishdate":"2020-09-21T15:25:57-04:00","relpermalink":"/ruben/publication/ai12/","section":"publication","summary":"The predominance of multicore processors has increased the interest in developing parallel Boolean Satisfiability (SAT) solvers. As a result, more parallel SAT solvers are emerging. Even though parallel approaches are known to boost performance, parallel approaches developed for Boolean optimization are scarce. This paper proposes parallel search algorithms for Maximum Satisfiability (MaxSAT) and introduces PWBO, a new parallel solver for partial MaxSAT. Using two threads, an unsatisfiability-based algorithm is used to search on the lower bound of the optimal solution, while at the same time a linear search is performed on the upper bound of the optimal solution. Moreover, learned clauses are shared between threads during the search. For a larger number of threads two different strategies are proposed. The first strategy performs a portfolio approach by searching on the lower and upper bound values of the optimal solution using different encodings of cardinality constraints for each thread. The second strategy splits the search space considering different upper bound values of the optimal solution for each thread. Experimental results show that the techniques proposed in the paper enable PWBO to improve when increasing the number of threads.","tags":[],"title":"Parallel Search for Maximum Satisfiability, AI Comm. 2012","type":"publication"}]